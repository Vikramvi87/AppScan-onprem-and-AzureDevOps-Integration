variables:
  url: https://www.abcd.com
  scanFile: $(System.DefaultWorkingDirectory)\$(Build.Repository.Name)-$(Build.BuildNumber).scan
  reportXMLsevSec: $(System.DefaultWorkingDirectory)\$(Build.Repository.Name)-$(Build.BuildNumber)-sevsec.xml
  reportPDFFile: $(System.DefaultWorkingDirectory)\$(Build.Repository.Name)-$(Build.BuildNumber).pdf
  loginDastConfig: $(System.DefaultWorkingDirectory)\dast.login
  manualExploreDastConfig: $(System.DefaultWorkingDirectory)\manualexplore.exd
  sevSecGw: criticalIssues
  maxIssuesAllowed: 0

trigger: none

pool: default

steps:
- pwsh: |
    Invoke-WebRequest -Uri https://raw.githubusercontent.com/jrocia/AppScan-onprem-and-AzureDevOps-integration/main/scripts/appscanstd_scan.ps1 -OutFile appscanstd_scan.ps1
    .\appscanstd_scan.ps1
  displayName: 'Running DAST scan'
- pwsh: |
    Invoke-WebRequest -Uri https://raw.githubusercontent.com/jrocia/AppScan-onprem-and-AzureDevOps-integration/main/scripts/appscanstd_generate_pdf_report.ps1 -OutFile appscanstd_generate_pdf_report.ps1
    .\appscanstd_generate_pdf_report.ps1
  displayName: 'Generating PDF Report'
- pwsh: |
    Invoke-WebRequest -Uri https://raw.githubusercontent.com/jrocia/AppScan-onprem-and-AzureDevOps-integration/main/scripts/appscanstd_check_security_gate.ps1 -OutFile appscanstd_check_security_gate.ps1
    .\appscanstd_check_security_gate.ps1
  displayName: 'Checking Security Gate'
- publish: $(Build.Repository.Name)-$(Build.BuildNumber).pdf
  artifact: $(Build.Repository.Name)-$(Build.BuildNumber).pdf
  continueOnError: On
  displayName: 'Uploading PDF to Azure Artifacts'
